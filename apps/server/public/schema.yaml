openapi: 3.0.0
info:
  title: Астрон личный кабинет API
  description: API для работы личного кабинета Астрон
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Локальный сервер
  - url: https://astronbuildings.com
    description: Боевой сервер
paths:
  /api/user/sign-in:
    post:
      summary: Аутентификация
      operationId: signIn
      tags:
        - Пользователи
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                  example: dev@mail.ru
                password:
                  type: string
                  example: password
                remember:
                  type: boolean
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - user
                properties:
                  accessToken:
                    type: string
                  user:
                    $ref: "#/components/schemas/Session"
        "400":
          description: Ошибка ввода данных
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Пользователь забанен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user/sign-out:
    get:
      summary: Разлогинить пользователя
      operationId: signOut
      tags:
        - Пользователи
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
  /api/user/session:
    get:
      summary: Получить сессию
      operationId: getSession
      tags:
        - Пользователи
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        "401":
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user/session/refresh:
    get:
      summary: Обновить токены
      operationId: refreshToken
      tags:
        - Пользователи
      parameters:
        - name: refreshToken
          in: cookie
          description: Refresh Token с клиента
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                properties:
                  accessToken:
                    type: string
        "401":
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user/password/change:
    post:
      summary: Изменить пароль
      operationId: changeUserPassword
      tags:
        - Пользователи
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - newPassword
              properties:
                password:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Пароль успешно изменен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Введен неверный пароль
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/user/password/send-link:
    post:
      summary: Отправить ссылку для восстановления пароля
      operationId: sendRecoveryPasswordLink
      tags:
        - Пользователи
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Ссылка для восстановления пароля отправлена на почту
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "404":
          description: Пользователь с таким email не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Ошибка при отправке письма
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user/password/recovery:
    post:
      summary: Восстановить пароль
      operationId: recoveryUserPassword
      tags:
        - Пользователи
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - token
              properties:
                password:
                  type: string
                token:
                  type: string
      responses:
        "200":
          description: Пароль успешно изменен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "403":
          description: Время на восстановление пароля по этой ссылке истекло
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Пользователь с таким ID токена не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user/company:
    get:
      summary: Получить компанию пользователя
      operationId: getUserCompany
      tags:
        - Пользователи
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/user/favorites:
    get:
      summary: Получить список избранных документов/бюллетеней
      operationId: getUserFavorites
      tags:
        - Избранное
      parameters:
        - name: page
          in: query
          required: false
          description: Номер страницы
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: Количество документов на странице
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - nextPage
                  - totalPages
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Favorite"
                  nextPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 10
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/user/favorites/add:
    post:
      summary: Добавить документ/бюллетень в избранное
      operationId: addFavorite
      tags:
        - Избранное
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
      responses:
        "200":
          description: Документ/бюллетень успешно добавлен в избранное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Документ/бюллетень с таким ID не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/user/favorites/remove:
    delete:
      summary: Удалить документ/бюллетень из избранного
      operationId: removeFavorite
      tags:
        - Избранное
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
      responses:
        "200":
          description: Документ/бюллетень успешно удален из избранного
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Документ/бюллетень с таким ID не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/news:
    get:
      summary: Получить список новостей
      operationId: getNews
      tags:
        - Новости
      parameters:
        - name: page
          in: query
          required: false
          description: Номер страницы
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: Количество новостей на странице
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - nextPage
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/News"
                  nextPage:
                    type: integer
                    example: 1
  /api/news/{id}:
    get:
      summary: Получить новость по ID
      operationId: getNewsById
      tags:
        - Новости
      parameters:
        - name: id
          in: path
          required: true
          description: ID новости
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/News"
        "404":
          description: Новость с таким ID не найдена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/documents:
    get:
      summary: Получить список документов
      operationId: getDocuments
      tags:
        - Документы
      parameters:
        - name: page
          in: query
          required: false
          description: Номер страницы
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: Количество документов на странице
          schema:
            type: integer
            example: 10
        - name: category
          in: query
          required: false
          description: Категория документа
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - totalPages
                  - nextPage
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Document"
                  totalPages:
                    type: integer
                    example: 10
                  nextPage:
                    type: integer
                    example: 1
  /api/documents/categories:
    get:
      summary: Получить список категорий документов
      operationId: getDocumentCategories
      tags:
        - Документы
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "Изменение цены"
  /api/bulletins:
    get:
      summary: Получить список бюллетеней
      operationId: getBulletins
      tags:
        - Бюллетени
      parameters:
        - name: page
          in: query
          required: false
          description: Номер страницы
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: Количество бюллетеней на странице
          schema:
            type: integer
            example: 10
        - name: category
          in: query
          required: false
          description: Категория бюллетеня
          schema:
            type: string
        - name: sort
          in: query
          required: false
          description: Сортировка бюллетеней
          schema:
            type: string
            enum:
              - latest
              - oldest
            default: latest
        - name: fromDate
          in: query
          required: false
          description: Дата начала периода
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          required: false
          description: Дата конца периода
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - totalPages
                  - nextPage
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Bulletin"
                  totalPages:
                    type: integer
                    example: 10
                  nextPage:
                    type: integer
                    example: 1
  /api/bulletins/categories:
    get:
      summary: Получить список категорий бюллетеней
      operationId: getBulletinCategories
      tags:
        - Бюллетени
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "Изменение цены"
  /api/search:
    get:
      summary: Поиск документов/бюллетеней/новостей
      operationId: search
      tags:
        - Поиск
      parameters:
        - name: query
          in: query
          required: true
          description: Запрос для поиска
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: Номер страницы
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: Количество результатов на странице
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - totalPages
                  - totalResults
                  - nextPage
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SearchResult"
                  totalPages:
                    type: integer
                    example: 10
                  totalResults:
                    type: integer
                    example: 300
                  nextPage:
                    type: integer
                    example: 1
  /api/employee-testing:
    get:
      summary: Получить данные тестирования сотрудников
      operationId: getEmployeeTesting
      tags:
        - KPI
      parameters:
        - name: period
          in: query
          required: true
          description: Период
          schema:
            type: string
            enum:
              - all
              - today
              - month
              - quarter
              - year
              - prev-year
              - prev-prev-year
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/EmployeeTesting"
components:
  schemas:
    User:
      type: object
      required:
        - id
        - surname
        - name
        - email
        - phone
        - password
        - favorites
        - tokenVersion
        - isBanned
      properties:
        id:
          type: string
          example: "1"
        surname:
          type: string
          example: Королев
        name:
          type: string
          example: Данил
        patronymic:
          type: string
          example: Николаевич
        email:
          type: string
          example: dev@mail.ru
        phone:
          type: string
          example: "+79231665038"
        password:
          type: string
          example: 123
        tokenVersion:
          type: integer
        isBanned:
          type: boolean
        favorites:
          type: array
          items:
            type: string
    Session:
      type: object
      required:
        - email
        - surname
        - name
        - phone
        - favorites
      properties:
        email:
          type: string
          example: dev@mail.ru
        surname:
          type: string
          example: Королев
        name:
          type: string
          example: Данил
        patronymic:
          type: string
          example: Николаевич
        phone:
          type: string
          example: "+79231665038"
        favorites:
          type: array
          items:
            type: string
    Company:
      type: object
      required:
        - id
        - title
        - projects
        - cooperationYears
        - logo
        - certificate
        - userId
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "NABUCCO Architecture & Construction"
        projects:
          type: object
          required:
            - count
            - link
            - implementedArea
          properties:
            count:
              type: integer
              example: 23
            link:
              type: string
              example: "/link/to/projects"
            implementedArea:
              type: integer
              example: 6578
        cooperationYears:
          type: integer
          example: 12
        logo:
          type: string
          example: "/path/to/logo.svg"
        certificate:
          type: string
          example: "/path/to/certificate.pdf"
        userId:
          type: string
          example: "1"
    News:
      type: object
      required:
        - id
        - title
        - description
        - content
        - img
        - createdAt
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: Ключевая ставка достигла 30%
        description:
          type: string
          example: Деняк нет, но вы держитесь
        img:
          type: string
          example: "/path/to/img.jpg"
        content:
          type: string
          example: "<p>Деняк нет, но вы держитесь</p>"
        createdAt:
          type: string
          format: date-time
          example: "2024-12-30T12:34:56Z"
    Document:
      type: object
      required:
        - id
        - title
        - file
        - category
        - createdAt
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Документ"
        file:
          type: object
          required:
            - url
            - size
          properties:
            url:
              type: string
              example: "/path/to/file.pdf"
            size:
              type: integer
              example: 607232
        category:
          type: string
          example: "Изменение цены"
        createdAt:
          type: string
          format: date-time
          example: "2024-12-30T12:34:56Z"
    Bulletin:
      type: object
      required:
        - id
        - title
        - file
        - category
        - createdAt
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Документ"
        file:
          type: object
          required:
            - url
            - size
          properties:
            url:
              type: string
              example: "/path/to/file.pdf"
            size:
              type: integer
              example: 607232
        category:
          type: string
          example: "Изменение цены"
        createdAt:
          type: string
          format: date-time
          example: "2024-12-30T12:34:56Z"
    Favorite:
      oneOf:
        - $ref: "#/components/schemas/Document"
        - $ref: "#/components/schemas/Bulletin"
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    Success:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    SearchResult:
      type: object
      required:
        - id
        - title
        - type
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Ключевая ставка достигла 30%"
        type:
          type: string
          enum:
            - news
            - document
            - bulletin
        description:
          type: string
          example: "Деняк нет, но вы держитесь"
        fileUrl:
          type: string
          example: "/path/to/file.pdf"
    EmployeeTesting:
      type: object
      required:
        - id
        - test
        - name
        - result
      properties:
        id:
          type: string
          example: "1"
        test:
          type: string
          example: "Специалист по монтажу"
        name:
          type: string
          example: "Иванов-Петров Кладиславослав"
        result:
          type: integer
          example: 81
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

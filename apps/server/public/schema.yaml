openapi: 3.0.0
info:
  title: Астрон личный кабинет API
  description: API для работы личного кабинета Астрон
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Локальный сервер
  - url: https://astronbuildings.com
    description: Боевой сервер
paths:
  /api/user/sign-in:
    post:
      summary: Аутентификация
      operationId: signIn
      tags:
        - Пользователи
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                  example: dev@mail.ru
                password:
                  type: string
                  example: password
                remember:
                  type: boolean
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - user
                properties:
                  accessToken:
                    type: string
                  user:
                    $ref: "#/components/schemas/Session"
        "400":
          description: Ошибка ввода данных
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Пользователь забанен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user/sign-out:
    get:
      summary: Разлогинить пользователя
      operationId: signOut
      tags:
        - Пользователи
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
  /api/user/session:
    get:
      summary: Получить сессию
      operationId: getSession
      tags:
        - Пользователи
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        "401":
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user/session/refresh:
    get:
      summary: Обновить токены
      operationId: refreshToken
      tags:
        - Пользователи
      parameters:
        - name: refreshToken
          in: cookie
          description: Refresh Token с клиента
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                properties:
                  accessToken:
                    type: string
        "401":
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user/password/change:
    post:
      summary: Изменить пароль
      operationId: changeUserPassword
      tags:
        - Пользователи
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - newPassword
              properties:
                password:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Пароль успешно изменен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Введен неверный пароль
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/user/password/send-link:
    post:
      summary: Отправить ссылку для восстановления пароля
      operationId: sendRecoveryPasswordLink
      tags:
        - Пользователи
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Ссылка для восстановления пароля отправлена на почту
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "404":
          description: Пользователь с таким email не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Ошибка при отправке письма
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user/password/recovery:
    post:
      summary: Восстановить пароль
      operationId: recoveryUserPassword
      tags:
        - Пользователи
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - token
              properties:
                password:
                  type: string
                token:
                  type: string
      responses:
        "200":
          description: Пароль успешно изменен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "403":
          description: Время на восстановление пароля по этой ссылке истекло
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Пользователь с таким ID токена не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/partners/session:
    get:
      summary: Получить Партнера-Строителя пользователя
      operationId: getPartnerBySession
      tags:
        - Партнеры-Строители
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartnerCard"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/partners/{id}:
    get:
      summary: Получить Партнера-Строителя по ID
      operationId: getPartnerById
      tags:
        - Партнеры-Строители
      parameters:
        - name: id
          in: path
          required: true
          description: ID партнера
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartnerCard"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Партнер-Строитель не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/partners/uploaded-date:
    get:
      summary: Получить дату последней выгрузки партнеров
      operationId: getPartnersUploadedDate
      tags:
        - Партнеры-Строители
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: string
                format: date-time
                example: "2024-01-01T12:00:00.000Z"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/partners:
    get:
      summary: Получить список партнеров
      operationId: getPartners
      tags:
        - Партнеры-Строители
      parameters:
        - name: sort
          in: query
          required: false
          description: Сортировка партнеров
          schema:
            type: string
            enum:
              - asc-sales
              - desc-sales
              - asc-bookings
              - desc-bookings
              - asc-name
              - desc-name
            default: asc-sales
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PartnerInList"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/partners/select:
    get:
      summary: Получить список партнеров для выбора
      operationId: getPartnersSelect
      tags:
        - Партнеры-Строители
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PartnerInSelect"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/news:
    get:
      summary: Получить список новостей
      operationId: getNews
      tags:
        - Новости
      parameters:
        - name: page
          in: query
          required: false
          description: Номер страницы
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: Количество новостей на странице
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - nextPage
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/NewsInList"
                  nextPage:
                    type: integer
                    example: 1
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/news/{id}:
    get:
      summary: Получить новость по ID
      operationId: getNewsById
      tags:
        - Новости
      parameters:
        - name: id
          in: path
          required: true
          description: ID новости
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/News"
        "404":
          description: Новость с таким ID не найдена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/news/read:
    post:
      summary: Пометить новость как прочитанную
      operationId: readNews
      tags:
        - Новости
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
      responses:
        "200":
          description: Новость успешно прочитана
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "404":
          description: Новость с таким ID не найдена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/documents:
    get:
      summary: Получить список документов
      operationId: getDocuments
      tags:
        - Документы
      parameters:
        - name: page
          in: query
          required: false
          description: Номер страницы
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: Количество документов на странице
          schema:
            type: integer
            example: 10
        - name: category
          in: query
          required: false
          description: Категория документа
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - totalPages
                  - nextPage
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Document"
                  totalPages:
                    type: integer
                    example: 10
                  nextPage:
                    type: integer
                    example: 1
  /api/documents/categories:
    get:
      summary: Получить список категорий документов
      operationId: getDocumentCategories
      tags:
        - Документы
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DocumentCategory"
  /api/bulletins:
    get:
      summary: Получить список бюллетеней
      operationId: getBulletins
      tags:
        - Бюллетени
      parameters:
        - name: page
          in: query
          required: false
          description: Номер страницы
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: Количество бюллетеней на странице
          schema:
            type: integer
            example: 10
        - name: category
          in: query
          required: false
          description: Категория бюллетеня
          schema:
            type: string
        - name: sort
          in: query
          required: false
          description: Сортировка бюллетеней
          schema:
            type: string
            enum:
              - latest
              - oldest
            default: latest
        - name: fromDate
          in: query
          required: false
          description: Дата начала периода
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          required: false
          description: Дата конца периода
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - totalPages
                  - nextPage
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Bulletin"
                  totalPages:
                    type: integer
                    example: 10
                  nextPage:
                    type: integer
                    example: 1
  /api/bulletins/categories:
    get:
      summary: Получить список категорий бюллетеней
      operationId: getBulletinCategories
      tags:
        - Бюллетени
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DocumentCategory"
  /api/bulletins/read:
    post:
      summary: Пометить бюллетень как прочитанный
      operationId: readBulletin
      tags:
        - Бюллетени
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
      responses:
        "200":
          description: Бюллетень успешно прочитан
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "404":
          description: Бюллетень с таким ID не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/user/favorites:
    get:
      summary: Получить список избранных документов/бюллетеней
      operationId: getUserFavorites
      tags:
        - Избранное
      parameters:
        - name: page
          in: query
          required: false
          description: Номер страницы
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: Количество документов на странице
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - nextPage
                  - totalPages
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Favorite"
                  nextPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 10
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/user/favorites/add:
    post:
      summary: Добавить документ/бюллетень в избранное
      operationId: addFavorite
      tags:
        - Избранное
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
      responses:
        "200":
          description: Документ/бюллетень успешно добавлен в избранное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Документ/бюллетень с таким ID не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/user/favorites/remove:
    delete:
      summary: Удалить документ/бюллетень из избранного
      operationId: removeFavorite
      tags:
        - Избранное
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
      responses:
        "200":
          description: Документ/бюллетень успешно удален из избранного
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Документ/бюллетень с таким ID не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/search:
    get:
      summary: Поиск документов/бюллетеней/новостей
      operationId: search
      tags:
        - Поиск
      parameters:
        - name: query
          in: query
          required: true
          description: Запрос для поиска
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: Номер страницы
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: Количество результатов на странице
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - totalPages
                  - totalResults
                  - nextPage
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SearchResult"
                  totalPages:
                    type: integer
                    example: 10
                  totalResults:
                    type: integer
                    example: 300
                  nextPage:
                    type: integer
                    example: 1
  /api/feedback:
    post:
      summary: Форма обратной связи
      operationId: sendFeedback
      tags:
        - Обратная связь
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - fio
                - phone
                - message
                - privacy
                - personalData
              properties:
                fio:
                  type: string
                  example: "Иванов Иван Иванович"
                phone:
                  type: string
                  example: "+79231665038"
                message:
                  type: string
                  example: "Хороший сайт"
                privacy:
                  type: boolean
                  example: true
                personalData:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
  /api/kpi/uploaded-date:
    get:
      summary: Получить дату последней выгрузки данных KPI
      operationId: getKpiUploadedDate
      tags:
        - KPI
      parameters:
        - name: partnerId
          in: query
          required: false
          description: ID партнёра
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: string
                format: date-time
                example: "2024-01-01T00:00:00.000Z"
        "404":
          description: Партнёр не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/kpi/employee-testing:
    get:
      summary: Получить данные тестирования сотрудников
      operationId: getEmployeeTesting
      tags:
        - KPI
        - Тестирование сотрудников
      parameters:
        - name: year
          in: query
          required: true
          description: Год
          schema:
            type: string
        - name: partnerId
          in: query
          required: false
          description: ID партнёра
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - uploadedAt
                  - updatedAt
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/EmployeeTesting"
                  uploadedAt:
                    type: string
                    format: date-time
                    example: "2024-01-01T00:00:00.000Z"
                  updatedAt:
                    type: string
                    format: date-time
                    example: "2024-01-01T00:00:00.000Z"
        "404":
          description: Партнёр не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/kpi/employee-testing/uploaded-years:
    get:
      summary: Получить список годов, за которые были загружены данные тестирования сотрудников
      operationId: getEmployeeTestingUploadedYears
      tags:
        - KPI
        - Тестирование сотрудников
      parameters:
        - name: partnerId
          in: query
          required: false
          description: ID партнёра
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "2024"
        "404":
          description: Партнёр не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/kpi/lead-generation/uploaded-years:
    get:
      summary: Получить список годов, за которые были загружены данные лидогенерации
      operationId: getLeadGenerationUploadedYears
      tags:
        - KPI
        - Лидогенерация
      parameters:
        - name: partnerId
          in: query
          required: false
          description: ID партнёра
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "2024"
        "404":
          description: Партнёр не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/kpi/lead-generation:
    get:
      summary: Получить данные лидогенерации
      operationId: getLeadGeneration
      tags:
        - KPI
        - Лидогенерация
      parameters:
        - name: year
          in: query
          required: true
          description: Год
          schema:
            type: string
        - name: partnerId
          in: query
          required: false
          description: ID партнёра
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeadGeneration"
        "404":
          description: Партнёр не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/kpi/lead-generation/quarter-passed:
    get:
      summary: Получить количество пройденных лидов по кварталам
      operationId: getLeadGenerationQuarterPassed
      tags:
        - KPI
        - Лидогенерация
      parameters:
        - name: year
          in: query
          required: true
          description: Год
          schema:
            type: string
        - name: partnerId
          in: query
          required: false
          description: ID партнёра
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeadGenerationQuarterPassed"
        "404":
          description: Партнёр не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /api/factory:
    get:
      summary: Получить информацию о заводе Астрон
      operationId: getFactoryInfo
      tags:
        - Завод
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - text
                properties:
                  text:
                    type: string
                    example: "<p>Текст о заводе Астрон</p>"
                  img:
                    $ref: "#/components/schemas/Image"
                  video:
                    $ref: "#/components/schemas/Video"
                  document:
                    $ref: "#/components/schemas/Document"
  /api/factory/team:
    get:
      summary: Получить список сотрудников завода Астрон
      operationId: getFactoryTeam
      tags:
        - Завод
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FactoryTeam"
  /api/academy/sections:
    get:
      summary: Получить список разделов академии
      operationId: getAcademySections
      tags:
        - Академия
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AcademySectionInList"
  /api/academy/sections/{id}:
    get:
      summary: Получить информацию о разделе академии
      operationId: getAcademySectionById
      tags:
        - Академия
      parameters:
        - name: id
          in: path
          required: true
          description: ID раздела
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcademySection"
        "404":
          description: Раздел не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/academy/sales:
    get:
      summary: Получить этапы процесса продаж в Академии
      operationId: getAcademySales
      tags:
        - Академия
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AcademySales"
  /api/academy/projects:
    get:
      summary: Получить список проектов и отзывов
      operationId: getAcademyProjects
      tags:
        - Академия
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AcademyProjectInList"
  /api/academy/projects/{id}:
    get:
      summary: Получить информацию о проекте
      operationId: getAcademyProjectById
      tags:
        - Академия
      parameters:
        - name: id
          in: path
          required: true
          description: ID проекта
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcademyProject"
        "404":
          description: Проект не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/academy/webinars:
    get:
      summary: Получить список вебинаров
      operationId: getAcademyWebinars
      tags:
        - Академия
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AcademyWebinarInList"
  /api/academy/webinars/{id}:
    get:
      summary: Получить информацию о вебинаре
      operationId: getAcademyWebinarById
      tags:
        - Академия
      parameters:
        - name: id
          in: path
          required: true
          description: ID вебинара
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcademyWebinar"
        "404":
          description: Вебинар не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/academy/benefits:
    get:
      summary: Получить список преимуществ
      operationId: getAcademyBenefits
      tags:
        - Академия
      parameters:
        - name: page
          in: query
          required: false
          description: Номер страницы
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: Количество преимуществ на странице
          schema:
            type: integer
            example: 10
        - name: tags
          in: query
          required: false
          description: Теги преимуществ
          schema:
            type: array
            items:
              type: string
              example: "technical-requirements"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - nextPage
                  - totalResults
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AcademyBenefitInList"
                  nextPage:
                    type: integer
                    example: 1
                  totalResults:
                    type: integer
                    example: 100
  /api/academy/benefits/{id}:
    get:
      summary: Получить информацию о преимуществе
      operationId: getAcademyBenefitById
      tags:
        - Академия
      parameters:
        - name: id
          in: path
          required: true
          description: ID преимущества
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcademyBenefit"
        "404":
          description: Преимущество не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/academy/benefits/tags:
    get:
      summary: Получить список тегов преимуществ
      operationId: getAcademyBenefitTags
      tags:
        - Академия
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AcademyBenefitTag"

components:
  schemas:
    User:
      type: object
      required:
        - id
        - surname
        - name
        - email
        - phone
        - password
        - role
        - favorites
        - tokenVersion
        - isBanned
      properties:
        id:
          type: string
          example: "1"
        surname:
          type: string
          example: Королев
        name:
          type: string
          example: Данил
        patronymic:
          type: string
          example: Николаевич
        email:
          type: string
          example: dev@mail.ru
        phone:
          type: string
          example: "+79231665038"
        password:
          type: string
          example: 123
        role:
          type: string
          enum:
            - manager
            - employee
            - partner
          example: "manager"
        tokenVersion:
          type: integer
        isBanned:
          type: boolean
        favorites:
          type: array
          items:
            type: string
        partnerId:
          type: string
          example: "1"
    Session:
      type: object
      required:
        - email
        - surname
        - name
        - phone
        - favorites
        - favoriteProjects
        - role
      properties:
        email:
          type: string
          example: dev@mail.ru
        surname:
          type: string
          example: Королев
        name:
          type: string
          example: Данил
        patronymic:
          type: string
          example: Николаевич
        role:
          type: string
          enum:
            - manager
            - employee
            - partner
          example: "manager"
        phone:
          type: string
          example: "+79231665038"
        favorites:
          type: array
          items:
            type: string
        favoriteProjects:
          type: integer
          example: 10
        unreadNews:
          type: array
          items:
            type: string
        unreadBulletins:
          type: array
          items:
            type: string
    PartnerCard:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Партнер"
        status:
          type: string
          enum:
            - platinum
            - gold
            - silver
        projects:
          type: object
          required:
            - count
            - link
          properties:
            count:
              type: integer
              example: 23
            link:
              type: string
              example: "/link/to/projects"
            implementedArea:
              type: integer
              example: 6578
        cooperationYears:
          type: integer
          example: 12
        logo:
          type: string
          example: "/path/to/logo.svg"
        certificate:
          type: string
          example: "/path/to/certificate.pdf"
    PartnerInList:
      type: object
      required:
        - id
        - title
        - sales
        - booking
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Партнер"
        logo:
          type: string
          example: "/path/to/logo.png"
        sales:
          type: object
          required:
            - total
            - percent
          properties:
            total:
              type: integer
              example: 1000000
            percent:
              type: integer
              example: 88
        booking:
          type: object
          required:
            - total
            - percent
          properties:
            total:
              type: integer
              example: 1000000
            percent:
              type: integer
              example: 88
    PartnerInSelect:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Партнер"
    News:
      type: object
      required:
        - id
        - title
        - content
        - createdAt
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: Ключевая ставка достигла 30%
        description:
          type: string
          example: Деняк нет, но вы держитесь
        img:
          $ref: "#/components/schemas/Image"
        content:
          type: object
          required:
            - text
          properties:
            text:
              type: string
              example: "Текст новости"
            documents:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/Document"
                  - $ref: "#/components/schemas/Bulletin"
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2024-12-30T12:34:56Z"
    NewsInList:
      type: object
      required:
        - id
        - title
        - createdAt
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Ключевая ставка достигла 30%"
        description:
          type: string
          example: "Деняк нет, но вы держитесь"
        img:
          $ref: "#/components/schemas/Image"
        createdAt:
          type: string
          format: date-time
          example: "2024-12-30T12:34:56Z"
    Document:
      type: object
      required:
        - id
        - title
        - file
        - category
        - createdAt
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Документ"
        file:
          type: object
          required:
            - url
            - size
          properties:
            url:
              type: string
              example: "/path/to/file.pdf"
            size:
              type: integer
              example: 607232
        category:
          $ref: "#/components/schemas/DocumentCategory"
        createdAt:
          type: string
          format: date-time
          example: "2024-12-30T12:34:56Z"
    Bulletin:
      type: object
      required:
        - id
        - title
        - file
        - category
        - createdAt
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Документ"
        file:
          type: object
          required:
            - url
            - size
          properties:
            url:
              type: string
              example: "/path/to/file.pdf"
            size:
              type: integer
              example: 607232
        category:
          $ref: "#/components/schemas/DocumentCategory"
        createdAt:
          type: string
          format: date-time
          example: "2024-12-30T12:34:56Z"
    DocumentCategory:
      type: object
      required:
        - id
        - label
        - slug
      properties:
        id:
          type: string
          example: "1"
        label:
          type: string
          example: "Изменение цены"
        slug:
          type: string
          example: "price-change"
    Favorite:
      oneOf:
        - $ref: "#/components/schemas/Document"
        - $ref: "#/components/schemas/Bulletin"
    SearchResult:
      type: object
      required:
        - id
        - title
        - type
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Ключевая ставка достигла 30%"
        type:
          type: string
          enum:
            - news
            - document
            - bulletin
        description:
          type: string
          example: "Деняк нет, но вы держитесь"
        fileUrl:
          type: string
          example: "/path/to/file.pdf"
    FactoryTeam:
      type: object
      required:
        - id
        - role
        - title
        - phone
      properties:
        id:
          type: string
          example: "1"
        img:
          $ref: "#/components/schemas/Image"
        role:
          type: string
          example: "Генеральный директор"
        title:
          type: string
          example: "Ягодкин Помидорослав"
        phone:
          type: string
          example: "+79000000000"
        email:
          type: string
          example: "email@astron.biz"
    AcademySection:
      type: object
      required:
        - id
        - title
        - content
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Процесс продаж"
        description:
          type: string
          example: "Описание процесса продаж"
        content:
          type: array
          items:
            $ref: "#/components/schemas/InfoBlock"
    AcademySectionInList:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Процесс продаж"
        bgImg:
          type: string
          example: "/path/to/bg-img.jpg"
        url:
          type: string
          example: "/path/to/url"
        icon:
          type: string
          example: "<svg>...</svg>"
    AcademySales:
      type: object
      required:
        - title
        - slug
        - content
      properties:
        title:
          type: string
          example: "New"
        description:
          type: string
          example: "Новый запрос на здание"
        slug:
          type: string
          example: "new"
        content:
          type: array
          items:
            $ref: "#/components/schemas/InfoBlock"
    AcademyProject:
      type: object
      required:
        - id
        - title
        - content
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Проект"
        description:
          type: string
          example: "Описание проекта"
        content:
          type: array
          items:
            $ref: "#/components/schemas/InfoBlock"
    AcademyProjectInList:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Проект"
        description:
          type: string
          example: "Описание проекта"
        img:
          $ref: "#/components/schemas/Image"
    AcademyWebinar:
      type: object
      required:
        - id
        - title
        - content
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Вебинар"
        description:
          type: string
          example: "Описание вебинара"
        content:
          type: array
          items:
            $ref: "#/components/schemas/InfoBlock"
    AcademyWebinarInList:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Вебинар"
        description:
          type: string
          example: "Описание вебинара"
        img:
          $ref: "#/components/schemas/Image"
    AcademyBenefit:
      type: object
      required:
        - id
        - title
        - tags
        - content
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Преимущество"
        description:
          type: string
          example: "Описание преимущества"
        img:
          $ref: "#/components/schemas/Image"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/AcademyBenefitTag"
        content:
          type: array
          items:
            $ref: "#/components/schemas/InfoBlock"
    AcademyBenefitInList:
      type: object
      required:
        - id
        - title
        - tags
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Преимущество"
        description:
          type: string
          example: "Описание преимущества"
        img:
          $ref: "#/components/schemas/Image"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/AcademyBenefitTag"
    AcademyBenefitTag:
      type: object
      required:
        - id
        - label
        - slug
      properties:
        id:
          type: string
          example: "1"
        label:
          type: string
          example: "Соответствие техническим требованиям"
        slug:
          type: string
          example: "technical-requirements"
    InfoBlock:
      oneOf:
        - $ref: "#/components/schemas/SectionBlock"
        - $ref: "#/components/schemas/HtmlBlock"
      discriminator:
        propertyName: type
        mapping:
          section: "#/components/schemas/SectionBlock"
          html: "#/components/schemas/HtmlBlock"
    SectionBlock:
      type: object
      required:
        - type
        - title
      properties:
        type:
          type: string
          enum: [section]
        title:
          type: string
          example: "Заголовок"
        text:
          type: string
        media:
          $ref: "#/components/schemas/MediaBlock"
        documents:
          type: array
          items:
            $ref: "#/components/schemas/Document"
    HtmlBlock:
      type: object
      required:
        - type
        - content
      properties:
        type:
          type: string
          enum: [html]
        content:
          type: string
    MediaBlock:
      oneOf:
        - $ref: "#/components/schemas/ImageBlock"
        - $ref: "#/components/schemas/VideoBlock"
      discriminator:
        propertyName: type
        mapping:
          image: "#/components/schemas/ImageBlock"
          video: "#/components/schemas/VideoBlock"
    ImageBlock:
      type: object
      required:
        - type
        - src
      properties:
        type:
          type: string
          enum: [image]
        src:
          type: string
          example: "/path/to/img.jpg"
        alt:
          type: string
          example: "Картинка завода Астрон"
    VideoBlock:
      type: object
      required:
        - type
        - src
        - thumbnail
      properties:
        type:
          type: string
          enum: [video]
        src:
          type: string
          example: "/path/to/video.mp4 or https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        thumbnail:
          type: string
          example: "/path/to/thumbnail.jpg"
        alt:
          type: string
          example: "Видео о заводе Астрон"
    Image:
      type: object
      required:
        - src
      properties:
        src:
          type: string
          example: "/path/to/img.jpg"
        alt:
          type: string
          example: "Картинка завода Астрон"
    Video:
      type: object
      required:
        - src
        - thumbnail
      properties:
        src:
          type: string
          example: "/path/to/video.mp4 or https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        thumbnail:
          type: string
          example: "/path/to/thumbnail.jpg"
        alt:
          type: string
          example: "Видео о заводе Астрон"
    EmployeeTesting:
      type: object
      required:
        - id
        - test
        - name
        - result
      properties:
        id:
          type: string
          example: "1"
        test:
          type: string
          example: "Специалист по монтажу"
        name:
          type: string
          example: "Иванов-Петров Кладиславослав"
        result:
          type: integer
          example: 81
    LeadGeneration:
      type: object
      required:
        - id
        - project
        - fixedAt
      properties:
        id:
          type: string
          example: "1"
        project:
          type: object
          required:
            - id
            - name
          properties:
            id:
              type: string
              example: "1"
            name:
              type: string
              example: "Проект"
        fixedAt:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00Z"
    LeadGenerationQuarterPassed:
      type: object
      required:
        - idx
        - passedCount
      properties:
        idx:
          type: integer
          example: 1
        passedCount:
          type: integer
          example: 5
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    Success:
      type: object
      required:
        - message
      properties:
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
